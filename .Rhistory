temp_R_naught = 1
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 1.1
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
root = temp_root$root
paste("The root of the equation is:", round(root,3))
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 1
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 0
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
root = temp_root$root
paste("The root of the equation is:", round(root,3))
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 1
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 2.0
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
root = temp_root$root
paste("The root of the equation is:", round(root,3))
View(temp_root)
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(1.1, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 0.7
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
root = temp_root$root
paste("The root of the equation is:", round(root,3))
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 0.743
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
root = temp_root$root
paste("The root of the equation is:", round(root,3))
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 2.0
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
root = temp_root$root
paste("The root of the equation is:", round(root,3))
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
paste("temp_r_naugh[i]", temp_R_naught[i])
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
print("temp_r_naugh[i]", temp_R_naught[i])
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
print( temp_R_naught[i])
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
print( temp_R_naught[i])
print( roots[i])
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
print( temp_R_naught[i], ":", roots[i])
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
print( temp_R_naught[i])
print( roots[i])
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
burn_out = function(R_inf, R_naught){
1 - exp(-R_naught * R_inf) - R_inf
}
temp_R_naught = 5
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught, tol = 0.001)
root = temp_root$root
paste("The root of the equation is:", round(root,3))
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
print( temp_R_naught[i])
print( roots[i])
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
print( temp_R_naught[i])
print( roots[i])
lines(roots[i] ~ temp_R_naught[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
print( temp_R_naught[i])
print( roots[i])
lines(temp_R_naught[i] ~ roots[i], lty = 1)
}
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
}
data.df <- data.frame(temp_R_naught, roots)
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
}
data.df <- data.frame(temp_R_naught, roots)
lines(data.df$temp_R_naught ~ data.df$roots, lty = 1, col = "black")
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:100){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
}
data.df <- data.frame(temp_R_naught, roots)
lines(data.df$roots ~ data.df$temp_R_naught, lty = 1, col = "black")
# HINTS:
# Values to test:
n_R_naught = 100
temp_R_naught = seq(0.7, 5.0, length.out = n_R_naught)
# Allocate storage:
roots = vector(mode = "numeric", length = n_R_naught)
# Set up a blank plot
plot(x=NA,
y=NA,
xlim = c(0, 5.0),
ylim = c(0, 1.0),
xlab=expression("R"[0]* " (R-naught)"),
ylab = "Cumulative Fraction Infected")
# Use a loop:
for(i in 1:n_R_naught){
temp_root =  uniroot(burn_out, interval = c(0.01, 1), extendInt = "yes",
R_naught = temp_R_naught[i], tol = 0.001)
roots[i] = temp_root$root
}
data.df <- data.frame(temp_R_naught, roots)
lines(data.df$roots ~ data.df$temp_R_naught, lty = 1, col = "black")
shiny::runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
runApp('GitHub/mobile_lidar')
shiny::runApp()
shiny::runApp('R')
devtools::load_all(".")
app()
app()
devtools::load_all(".")
app()
devtools::load_all(".")
app()
devtools::load_all(".")
app()
